#![allow(dead_code)]
use std::time::Duration;
use tokio::task::JoinHandle;
use tonic::{transport::Channel, Status};
use <%= cargo.crate_name %>::create_router;

pub async fn setup(signal: triggered::Listener) -> Result<(JoinHandle<()>, Channel), Box<dyn std::error::Error>> {
    let srv: JoinHandle<()> = tokio::spawn(async move {
    // Launch gRPC server
    create_router().await
        .serve_with_shutdown("127.0.0.1:50051".parse().unwrap(), signal)
        .await.unwrap()
    });

    tokio::time::sleep(Duration::from_millis(100)).await;

    // Create channel for gRPC client
    let channel = Channel::from_static("http://127.0.0.1:50051")
        .timeout(Duration::from_secs(30))
        .concurrency_limit(20)
        .connect_lazy()
        .or_else(|_e| Err(Status::cancelled("client connection error")))?;

    Ok((srv, channel))
}
