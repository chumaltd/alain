#![allow(dead_code)]
use std::time::Duration;
use tokio::task::JoinHandle;
use tonic::{transport::Channel, Status};
use triggered::{trigger, Trigger};
use <%= cargo.crate_name %>::start_server;

pub async fn setup() -> Result<(JoinHandle<()>, Channel, Trigger), Box<dyn std::error::Error>> {
    let (shutdown_trigger, signal) = trigger();
    let srv: JoinHandle<()> = tokio::spawn(async move {
    // Launch gRPC server
    start_server("127.0.0.1:50051".parse().unwrap(), signal)
        .await.unwrap()
    });

    tokio::time::sleep(Duration::from_millis(100)).await;

    // Create channel for gRPC client
    let channel = Channel::from_static("http://127.0.0.1:50051")
        .timeout(Duration::from_secs(30))
        .concurrency_limit(20)
        .connect_lazy();

    Ok((srv, channel, shutdown_trigger))
}
